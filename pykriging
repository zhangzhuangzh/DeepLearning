from __future__ import print_function
__author__ = 'cpaulson'
import sys
sys.path.insert(0, '../')
import pyKriging
from pyKriging.regressionkrige import regression_kriging
from pyKriging.samplingplan import samplingplan
import numpy as np

from pyKriging.krige import kriging
# The Kriging model starts by defining a sampling plan, we use an optimal Latin Hypercube here
# sp = samplingplan(1)
# X = sp.optimallhc(10)
#
# # Next, we define the problem we would like to solve
# testfun = pyKriging.testfunctions().branin_noise
#
# # We generate our observed values based on our sampling plan and the test function
# y = testfun(X)
# print(X, y)
#
# testfun = pyKriging.testfunctions().branin

file_path = r"kriging.txt"
file_contents= np.loadtxt(file_path)
#np.random.shuffle(file_contents)
input_end_column = 29
test_data=file_contents[:,0:input_end_column+1]
testout_data=file_contents[:,30]
input_data = file_contents[:,0:input_end_column+1]
output_data = file_contents[:,30]

n_train = 35

training_data = input_data[:n_train,:]
print("(n_samples, n_features) =", training_data.shape)
target_values = output_data[:n_train]

print('Setting up the Kriging Model')

# Now that we have our initial data, we can create an instance of a kriging model
k = regression_kriging(training_data, target_values, name='simple', testPoints=n_train)
k.train(optimizer='pso')
k1 = kriging(training_data, target_values, name='simple', testPoints=n_train)
k1.train(optimizer='pso')
print(k.Lambda)
k.snapshot()


for i in range(1):
    newpoints = k.infill(35)
    for point in newpoints:
        print('Adding point {}'.format(point))
        # newValue = testfun(point)[0]
        newValue = target_values[point]
        k.addPoint(point, newValue)
        k1.addPoint(point, newValue)
    k.train()
    k1.train()
    # k.snapshot()
#
# # #And plot the model

print('Now plotting final results...')
print(k.Lambda)
k.plot(show=False)
k1.plot()
